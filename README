Προγραμματισμός Συστήματος - Άσκηση 3
Δημήτρης Μπούσουλας 1115201500106

-Λογικη
Ξεκινάει ο server και ακούει στο StatisticsPort για συνδέσεις από workers. Μόλις
συνδεθούν οι workers τον ενημερώνουν για το Port στο οποίο ακούει ο καθένας, για
το πλήθος τους, για τις χώρες που έχει ο καθένας και τέλος του στέλνουν τα
statistics (τα οποία δεν αξιοποιεί καθώς προωθεί όλες τις ερωτήσεις στους workers)
Η while σταματάει μόλις πάρει από όλους τους workers τα statistics (τα οποία δεν 
εμφανίζει για να είναι πιο εμφανίσιμο το τελικό output). Σ εκείνο το σημείο αρχίζει
και ακούει στο QueryPort για συνδέσεις από clients (threads του client) ώστε να 
λάβει ερωτήματα να τα προωθήσει στους workers και τα αποτελέσματα να τα εμφανίσει
και να τα στείλει και στον client που έστειλε την ερώτηση.

-whoServer
Ο server εφόσον διαβάσει τα ορίσματα ξεκινάει numThreads threads και στην συνέχεια
ακούει στο statisticsPort. Κάθε νέα σύνδεση που έρχεται την βάζει στον buffer, μόλις
λάβει συνδέσεις απ' όλους τους workers αρχίζει να ακούει στο queryPort, όπου λαμβάνει
συνδέσεις από clients και τις εισάγει στον buffer. Μένει σε αυτήν την while μέχρι να
λάβει σήμα τερματισμού.

-threadServer
Τα thread του server παίρνουν ατελείωτα sockets από τον buffer (που τα έχει εισάγει
ο server main thread και αν αυτός δεν είναι άδειος).
Αν πρόκειται για statistic connection, δηλαδή το 1ο μήνυμα ξεκινάει με 's', διαβάζει 
3 μηνύματα workerPort, numWorkers και countCountries αντίστοιχα έπειτα διβάζει
και τις χώρες του worker με τον οποίο επικοινωνεί. αυτά τα δεδομένα τα αποθηκεύει σε
global μεταβλητές ώστε να έχει πρόσβαση κάθε thread που θα χρειαστεί να προωθήσει
ερώτημα σε κάποιον worker (δηλαδή όλα τα thread να ξέρουν τα ports όλων των workers
και όχι μόνο αυτονών που έτυχε να εξυπηρετήσουν για τα statitics). Τέλος διαβάζει τα
summary statistics (όπως στην εργασία 2). Το numWorkers το χρειάζεται το main thread
του server ώστε να ξέρει πότε θα αρχίσει να ακούει queries. 
Αν πρόκειται για query connection καλεί την commandIdentifier ώστε να αναγνωρίσει το
ερώτημα. Ανάλογα με το ερώτημα το προωθεί σε όλους τους workers ή σε έναν συγκεκριμένο
αν πρόκειται για ερώτημα που αφορά συγκεκριμένη χώρα. Στην συνέχεια παίρνει από τον 
worker ή τους workers το result και το εμφανίζει και το προωθεί και στον client. Αν
το ερώτημα ήταν λάθος εμφανίζει το κατάλληλο μήνυμα και το πρωθεί και στον client χωρίς
να επικοινωνήσει με τους workers. Επίσης όταν ένα ερώτημα το στέλνει σε πολλόυς workers
περιμένει τις απαντήσεις χρησιμοποιώντας την select ακριβώς όπως και στην 2η εργασία 
ώστε να μην τον καθυστερούν αργοί workers.

master:
Ο master κάνει ακριβώς την ίδια δουλειά με την 2η εργασία με την διαφορά ότι οι workers
τα summary statistics τα στέλνουν στον server εφόσον πρώτα του στείλουν το Port, numWorkers
κτλ. Έπειτα ακούν ο καθένας στο δικό του Port (τα οποία είναι το Port του server + id του
καθενός, δηλαδή ServerPort+1, ServerPort+2 ...). Εκεί ακούνε για queries ώστε να ψάξουν στις
δομές τους και να επιστρέψουν το result. Παραμένουν μέσα σε αυτήν την while μέχρι να λάβει
σήμα ο master ώστε να τους στείλει SIGKILL. O master εμφανίζει με το που ξεκινήσει την pid
του ώστε να του στείλουμε έυκολα σήμα.

whoClient:
Ο client διαβάζει το queryFile και το αποθηκεύει σε έναν global πίνακα από strings ο οποίος
περιέχει τα queries. Έπειτα δημιουργεί τα threads του τα οποία ξεκινάνε και παίρνουν από
ένα ερώτημα το καθένα μόλις όλα πάρουν από ένα ερώτημα (ώστε να πυροβολήσουν όλα μαζί τον
server) τα προωθούν στον server και εμφανίζουν το αποτέλεσμα που θα τους απαντήσει ο server.
Μόλις όλα τα threads τερματίσουν, τερματίζει και το main thread. Στην περίπτωση που τα threads
είναι περισσότερα από τα ερωτήματα τότε τα πεισσευούμενα τερματίζουν χωρίς να κάνουν κάτι. Αν 
τα ερωτήαμτα είναι περισσότερα από τα threads τότε παίρνουν όλα από ένα ερώτημα και το προωθούν
όλα μαζί και στην συνέχεια παίρνουναυθαίρετα τα υπόλοιπα και τα προωθούν ένα-ένα μέχρι να τα 
πάρουν όλα.

Παρατηρήσεις:
- Τα προγράμματα πρέπει να τρέχουν από το ίδιο μηχάνημα ώστε να πετύχει η επικοινωνία τους. 
Προσπάθησα πολύ ώρα να βρω την λύση κι έπειτα από πολλές ερωτήσεις στο πιάτσα και άπειρες
δοκιμές δεν κατάφερα να ξεπεράσω αυτό το πρόβλημα.
- Το queryPort πρέπι να είναι είτε μικρότερο του statisticsPort είτε να είναι μεγαλύτερο κατά numWorkers+1
- Το SIGCHILD του master δεν ολοκληρώθηκε οπότε αντί να αντικαθιστά το παιδί που τελείωσε πρόωρα
σκοτώνει και τα υπόλοιπα παιδιά και τερματίζει τον master.

Compile:
"make" στους φακέλους whoServer, whoClient, master για να φτιαχτούν τα εκτελέσιμο
"make worker" στον φάκελο master για να φτιαχτεί το εκτελέσιμο worker που καλεί η exec για τους workers


